# -*- coding: utf-8 -*-
"""CSE422LAB01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XP3SpJ6uUGy8hSK2neFjUZhgdtVxv1Im
"""

# Level 1
import numpy as np
input_file1 = open("inputfile1.txt")
vertex = int(input_file1.readline().strip())+1
connection = int(input_file1.readline().strip())
array = np.zeros((vertex, vertex), dtype='int')
for x in range(0, connection):
   position = input_file1.readline().strip()
   if not position:
     break
   vert=position.split(' ')
   r=int(vert[0])
   c=int(vert[1])
   array[r][c]=1


from queue import Queue

def Find_Shortest_Path(start,target):
 visit=np.empty(vertex,dtype='object')
 visit[:]='not visited'
 parent=np.empty(vertex,dtype='object')
 parent[:]=np.NaN
 dist=np.zeros(vertex,dtype='int')
 q=Queue()
 visit[start]='visiting'
 parent[start]=np.NaN
 dist[start]=0
 q.put(start)
 while not q.empty():
   u=q.get()
   for v in range(1,vertex):
     if array[u][v]==1:
       if visit[v]=='not visited':
           visit[v]='visiting'
           dist[v]=dist[u]+1
           parent[v]=u
           q.put(v)

   visit[u]='visited'
   if str(str(u))==str(target):
     return dist[u]

dst=input_file1.readline().strip()
print("Level 1 output: "+str(Find_Shortest_Path(0,dst)))

# Level 2
input_file2=open("inputfile2.txt")
vertex = int(input_file2.readline().strip())+1
connection = int(input_file2.readline().strip())
array =np.zeros((vertex, vertex),dtype='int')
for i in range(0, connection):
 position =input_file2.readline().strip()

 if not position:
   break
 vertices=position.split(' ')
 u=int(vertices[0])
 v=int(vertices[1])
 array[u][v]=1

x=int(input_file2.readline().strip())
p=int(input_file2.readline().strip())
q=int(input_file2.readline().strip())
Nora=int(Find_Shortest_Path(p,x))
Lara=int(Find_Shortest_Path(q,x))
if Nora<Lara:
 print("Level 2 output: Nora")
else:
 print("Level 2 output: Lara")

# Level 3

input_file3 =open("inputfile3.txt")
vertex = int(input_file3.readline().strip())+1
connection = int(input_file3.readline().strip())
array =np.zeros((vertex,vertex),dtype='int')
for i in range(0, connection):
 position=input_file3.readline().strip()
 if not position:
   break
 vertices=position.split(' ')
 u=int(vertices[0])
 v=int(vertices[1])
 array[v][u]=1

def perform_BFS(player,dst):
 visit=np.empty(vertex,dtype='object')
 visit[:]='not visited'
 parent=np.empty(vertex,dtype='object')
 parent[:]=np.NaN
 distance=np.zeros(vertex,dtype='int')
 q=Queue()
 visit[dst]='visiting'
 parent[dst]=np.NaN
 distance[dst]=0
 q.put(dst)
 while not q.empty():
   u=q.get()
   for v in range(1,vertex):
     if array[u][v]==1:
       if visit[v]=='not visited':
           visit[v]='visiting'
           distance[v]=distance[u]+1
           parent[v]=u
           q.put(v)
   visit[u]='visited'
   if (u in player):
     print("Level 3 output: "+str(distance[u]))
     return distance[u]

x=int(input_file3.readline().strip())
player=[]
for k in range(int(input_file3.readline().strip())):
 player.append(int(input_file3.readline().strip()))
perform_BFS(player,x)