# -*- coding: utf-8 -*-
"""18101708_LAB02_Genetic_algo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F7-a4BYfnLWUhBJGICrvOPTj_6AejEmQ
"""

def random_chromosome(size): 
    return [ random.randint(1, n) for _ in range(n) ]

def probability(n, fitness):
    return fitness(n) / desired_fitness

def select(population, probabilities):
    populationWithProbability = zip(population, probabilities)
    total = sum(y for x, y in populationWithProbability)
    least_value = random.uniform((total/4), total)
    upto = 0
    for chromosome, probability in zip(population, probabilities):
        if upto + probability > least_value:
            return chromosome
        upto += probability

def crossover(x, y):
  index = random.randint(0,8)
  right = y[index:8]
  left = x[:index]
  left.extend(right)
  return left

def fitness(population):
    diagonal_collisions = 0
    length = len(population)
    left_diagonal = [0] * 2*length
    right_diagonal = [0] * 2*length

    for i in range(2*length-1):
        tracker = 0
        if left_diagonal[i] > 1:
            tracker += left_diagonal[i]-1
        if right_diagonal[i] > 1:
            tracker += right_diagonal[i]-1
        diagonal_collisions += tracker / (length-abs(i-length+1))

    for i in range(length):
        left_diagonal[i + population[i] - 1] += 1
        right_diagonal[len(population) - i + population[i] - 2] += 1

    row_collisions = sum([population.count(i)-1 for i in population])/2
    
    return int(desired_fitness - (row_collisions + diagonal_collisions))

def mutate(child): 
    length = len(child)
    index = random.randint(0, length - 1)
    mutated_value = random.randint(1, length)
    child[index] = mutated_value
    return child

def genetic_algorithm(population, fitness, mutation_threshold):
    new_population = []
    probabilities = []
    
    for n in population:
      probabilities.append(probability(n, fitness))

    for i in range(len(population)):
        x = select(population, probabilities) 
        y = select(population, probabilities) 
        child = crossover(x, y) 
        if random.random() < mutation_threshold:
            child = mutate(child)
        new_population.append(child)
        if fitness(child) == desired_fitness:
          break
    return new_population

def print_result(population,desired_fitness,n,generation):
  for i in population:
    if fitness(i) == desired_fitness:
      
      print ("...done. \n\nresult ", i," found in Solved in {} generations.".format(generation-1))

import random    

n = 8 
start_population = 10 
mutation_threshold = 0.3
desired_fitness = (n*(n-1))/2  
generation = 1

population = []
for i in range(10):
  population.append([ random.randint(1, n) for i in range(n) ]) 

print("Goal Fit for current population: ", int(desired_fitness),"\n")
print("Problem dimension:",n,"x",n)
print("Population size: ",start_population)

print ("\nrunning...\n")

while not desired_fitness in [fitness(i) for i in population]:
  population = genetic_algorithm(population, fitness, mutation_threshold)
  generation += 1

print_result(population,desired_fitness,n,generation)